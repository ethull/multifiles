vimscript
//map keys
    n  Normal mode, ':nmap' or ':nnoremap'.
    i  Insert mode, ':imap' or ':inoremap'.
    v  Visual and select, ':vmap' or ':vnoremap'.
    x  Visual mode, ':xmap' or ':xnoremap'.
    s  Select mode, ':smap' or ':snoremap'.
    c  Command-line mode, ':cmap' or ':cnoremap'.
    o  Operator pending mode ':omap' or ':onoremap'.
      " (when an operation is pending (eg after y or d))
//vars
    :let foo = "bar"
//read/set options as vars
    :set textwidth=80
    //access option
        :echo &textwidth

//logic
    //js //VimL
    !x 	!x
    x || y 	x || y
    x && y 	x && y
    x < y, etc. 	x < y, etc.
    x == y 	x ==# y
    x === y 	x is# y
    x !== y 	x isnot# y
    x ? y : z 	x ? y : z

//string operations
    //JavaScript 	//VimL
    str.length 	len(str)
    str[i] 	str[i]
    str[str.length - i] 	str[-i]
    str.slice(i) 	str[i:]
    str.slice(start, end) 	str[start : end - 1]
    str.slice(start, -1) 	str[start : -2]
    str.slice(-2, -1) 	str[-2 : -2]
    str + x 	str . x
    str.startsWith(x) 	str[:len(x) - 1] is# x
    str.indexOf(x) 	stridx(str, x)
    str.lastIndexOf(x) 	strridx(str, x)
    str.includes(x) 	stridx(str, x) >= 0
    str.match(x) || [] 	matchlist(str, x)
    (str.match(x) || [])[0] 	matchstr(str, x)
    str.match(x) != null 	str =~# x
    str.match(x) == null 	str !~# x
    str.repeat(x) 	repeat(str, x)
    str.replace('xyz', r) 	No direct equivalent
    str.replace(/xyz/, r) 	substitute(str, 'xyz', r, '')
    str.replace(/xyz/g, r) 	substitute(str, 'xyz', r, 'g')
    str.normalize(x) 	No direct equivalent
    str.trim() 	No direct equivalent

//list operations
    //Js //VimL
    +x 	+x
    -x 	-x
    x + y 	x + y
    x - y 	x - y
    x * y 	x * y
    x / y 	x / y
    x ** y 	pow(x, y)
    x & y 	and(x, y)
    x | y 	or(x, y)
    x ^ y 	xor(x, y)
    ~x 	invert(x)
    x << y 	None
    x >> y 	None
    x >>> y 	None
    Math.max(x, y) 	max([x, y])
    Math.min(x, y) 	min([x, y])
    Math.round(x) 	round(x)
    Math.ceil(x) 	ceil(x)
    Math.floor(x) 	floor(x)
    Math.trunc(x) 	trunc(x)
    Math.sqrt(x) 	sqrt(x)
    Math.exp(x) 	exp(x)
    Math.log(x) 	log(x)
    Math.log10(x) 	log10(x)
    Math.log2(x) 	log(x) / log(2)
    Math.abs(x) 	abs(x)
    Math.acos(x) 	acos(x)
    Math.asin(x) 	asin(x)
    Math.atan(x) 	atan(x)
    Math.atan2(x, y) 	atan2(x, y)
    Math.cos(x) 	cos(x)
    Math.tan(x) 	tan(x)

//list operations
    //JavaScript 	//VimL
    list.length 	len(list)
    list[i] 	get(list, i)
    list[list.length - i] 	get(list, -i)
    No equivalent 	list[i]
    No equivalent 	list[-i]
    list.slice() 	copy(list)
    list.slice(i) 	list[i:]
    list.slice(start, end) 	list[start : end - 1]
    list.slice(start, -1) 	list[start : -2]
    list.slice(-2, -1) 	list[-2 : -2]
    list.slice(0, 1) 	list[0 : 0]
    list.concat(x) 	list + x
    list.push(x) 	add(list, x)
    list.push(...x) 	extend(list, x)
    list.unshift(x) 	insert(list, x)
    list.splice(i, 0, x) 	insert(list, i, x)
    list.splice(i, 1) 	remove(list, i)
    list.splice(i, 2) 	remove(list, i, i + 1)
    list.splice(i, 0, x, y) 	extend(list, [x, y], i)
    list.pop() 	remove(list, -1)
    list.indexOf(x) 	index(list, x)
    list.indexOf(x, i) 	index(list, x, i)
    list.includes(x) 	index(list, x) >= 0
    list.join(x) 	join(list, x)
    list.reverse() 	reverse(list)
    list.sort() 	sort(list)
    list.sort(CmpFunc) 	sort(list, CmpFunc)
    No direct equivalent 	uniq(list)
    No direct equivalent 	uniq(list, CmpFunc)
    No direct equivalent 	list1 == list2
    list1 === list2 	list1 is list2


//dictionary
    //js 	//VimL
    obj.xyz 	obj.xyz
    obj.xyz = value 	let obj.xyz = value
    obj[key] 	get(obj, key)
    No equivalent 	obj[key]
    obj[key] = value 	let obj[key] = value
    key in obj 	has_key(obj, key)
    delete obj1.xyz 	call remove(obj1, 'xyz') (Can throw errors)
    delete obj1[key] 	call remove(obj1, key) (Can throw errors)
    Object.keys(obj) 	keys(obj)
    Object.keys(obj).length 	len(obj)
    Object.values(obj) 	values(obj)
    Object.entries(obj) 	items(obj)
    Object.assign(obj1, obj2) 	extend(obj1, obj2)
    Object.freeze(obj) 	No equivalent
    Object.seal(obj) 	No equivalent
    No direct equivalent 	obj1 == obj2
    obj1 === obj2 	obj1 is obj2

//type conversions
    //Types             //Syntax
    String -> Number 	str2nr(x)
    String -> Float 	str2float(x)
    Float -> Number 	float2nr(x), float2nr(ceil(x)), float2nr(floor(x))
    Number -> Float 	floor(x)
    Number -> String 	string(x)
    Float -> String 	string(x)
    Boolean -> Number 	+x
    Number -> Boolean 	x ? v:true : v:false

//type checking
    Type 	Expression
    String 	type(x) is v:t_string
    Number 	type(x) is v:t_number
    Float 	type(x) is v:t_float
    Dictionary 	type(x) is v:t_dict
    List 	type(x) is v:t_list
    Funcref 	type(x) is v:t_func
    Boolean 	type(x) is v:t_bool
    v:null 	x is v:null

    Types 	Example
    ? == String 	x is# 'foo'
    ? == Number 	x is 42
    ? == Float 	x is 42.0
    ? == Dictionary 	type(x) is v:t_dict && x ==# {'x': 'y'}
    ? == List 	type(x) is v:t_list && x ==# [1, 2]
    ? == Funcref 	x is function('type')
    ? == Boolean 	x is v:true or x is v:false
    ? == v:null 	x is v:null

//decision
    if cond1
      " command1
    elseif cond2
      " command2
    else
      " command3
    endif

//iteration
while cond
  " command
endwhile

for index in range(length)
  " command
endfor

for variable in iterable
  " command
endfor

//except
    try
      " Throw an error.
      throw 'xxx foo xxx'
    " Catch all errors with a message containing 'foo'
    catch /foo/
      call HandleException()
    " finally is optional
    finally
      call AlwaysDoSomethingElse()
    endtry

//func
    function! Foo() abort
      return 42
    endfunction

    //reference a function.
    let Func2 = funcref('Foo')

//var scope
    //Scope //Explanation
    g:x 	x in the global scope.
    l:x 	x in the local scope.
    a:x 	Function argument x. Read-only.
    s:x 	x in the script's scope. Only accessible in the script.
    v:x 	A read-only special Vim variable x.
    b:x 	x in the current buffer.
    w:x 	x in the current window.
    t:x 	x in the current tab.
